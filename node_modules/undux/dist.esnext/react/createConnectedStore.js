import * as React from 'react';
import { createStore, StoreSnapshotWrapper } from '..';
import { equals, getDisplayName, some } from '../utils';
export function createConnectedStore(initialState, effects) {
    let Context = React.createContext({ __MISSING_PROVIDER__: true });
    class Container extends React.Component {
        constructor(props) {
            super(props);
            // Create store definition from initial state
            let state = props.initialState || initialState;
            this.storeDefinition = createStore(state);
            // Apply effects?
            let fx = props.effects || effects;
            if (fx) {
                fx(this.storeDefinition);
            }
            this.state = {
                storeSnapshot: this.storeDefinition.getCurrentSnapshot()
            };
            this.subscription = this.storeDefinition.onAll().subscribe(() => this.setState({ storeSnapshot: this.storeDefinition.getCurrentSnapshot() }));
        }
        componentWillUnmount() {
            this.subscription.unsubscribe();
            // Let the state get GC'd.
            // TODO: Find a more elegant way to do this.
            this.storeDefinition.storeSnapshot = null;
            this.storeDefinition = null;
        }
        render() {
            return React.createElement(Context.Provider, { value: this.state.storeSnapshot }, this.props.children);
        }
    }
    let Consumer = (props) => React.createElement(Context.Consumer, null, store => {
        if (!isInitialized(store)) {
            throw Error(`[Undux] Component "${props.displayName}" does not seem to be nested in an Undux <Container>. To fix this error, be sure to render the component in the <Container>...</Container> component that you got back from calling createConnectedStore().`);
        }
        return props.children(store);
    });
    function withStore(Component) {
        let displayName = getDisplayName(Component);
        let f = props => React.createElement(Consumer, { displayName: displayName }, storeSnapshot => React.createElement(SnapshotComponent, { Component: Component, props: props, storeSnapshot: storeSnapshot }));
        f.displayName = `withStore(${displayName})`;
        return f;
    }
    return {
        Container,
        withStore
    };
}
class SnapshotComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.isSubscribedToAllFields = false;
        // https://jsperf.com/set-membership-vs-object-key-lookup
        this.subscribedFields = {};
        this.onGetOrSet = (key) => {
            if (this.isSubscribedToAllFields) {
                return;
            }
            this.subscribedFields[key] = true;
        };
        this.onGetAll = () => {
            this.isSubscribedToAllFields = true;
            this.subscribedFields = {};
        };
    }
    shouldComponentUpdate(nextProps) {
        if (this.isSubscribedToAllFields) {
            return true;
        }
        return some(this.subscribedFields, (_, k) => !equals(nextProps.storeSnapshot.get(k), this.props.storeSnapshot.get(k))) || some(nextProps.props, (v, k) => !equals(v, this.props.props[k]));
    }
    render() {
        let { Component, props } = this.props;
        let wrapper = new StoreSnapshotWrapper(this.props.storeSnapshot, this.onGetOrSet, this.onGetAll, Object.assign({}, this.subscribedFields), // Be careful not to mutate
        this.isSubscribedToAllFields);
        return React.createElement(Component, Object.assign({ store: wrapper }, props));
    }
}
function isInitialized(store) {
    return !('__MISSING_PROVIDER__' in store);
}
//# sourceMappingURL=createConnectedStore.js.map